# docker-compose.yml - Docker configuration pÃ«r Legal Case Manager
version: '3.8'

services:
  # ==========================================
  # DATABASE SERVICE
  # ==========================================
  db:
    image: postgres:15-alpine
    container_name: legal_manager_db
    environment:
      POSTGRES_DB: legal_manager
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db_init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================
  # REDIS SERVICE (Cache & Celery Broker)
  # ==========================================
  redis:
    image: redis:7-alpine
    container_name: legal_manager_redis
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================
  # DJANGO WEB APPLICATION
  # ==========================================
  web:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: legal_manager_web
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py loaddata initial_data.json &&
             gunicorn legal_manager.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    environment:
      - DEBUG=False
      - SECRET_KEY=your-secret-key-here-change-in-production
      - DATABASE_URL=postgresql://postgres:postgres123@db:5432/legal_manager
      - REDIS_URL=redis://:redis123@redis:6379/0
      - CELERY_BROKER_URL=redis://:redis123@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:redis123@redis:6379/0
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0
      - EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================
  # CELERY WORKER
  # ==========================================
  celery_worker:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: legal_manager_celery_worker
    command: celery -A legal_manager worker -l info -Q default,notifications,documents,maintenance
    volumes:
      - .:/app
      - media_volume:/app/media
      - ./logs:/app/logs
    environment:
      - DEBUG=False
      - SECRET_KEY=your-secret-key-here-change-in-production
      - DATABASE_URL=postgresql://postgres:postgres123@db:5432/legal_manager
      - REDIS_URL=redis://:redis123@redis:6379/0
      - CELERY_BROKER_URL=redis://:redis123@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:redis123@redis:6379/0
      - EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend
    depends_on:
      - db
      - redis
      - web
    restart: unless-stopped

  # ==========================================
  # CELERY BEAT SCHEDULER
  # ==========================================
  celery_beat:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: legal_manager_celery_beat
    command: celery -A legal_manager beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - .:/app
      - ./logs:/app/logs
    environment:
      - DEBUG=False
      - SECRET_KEY=your-secret-key-here-change-in-production
      - DATABASE_URL=postgresql://postgres:postgres123@db:5432/legal_manager
      - REDIS_URL=redis://:redis123@redis:6379/0
      - CELERY_BROKER_URL=redis://:redis123@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:redis123@redis:6379/0
    depends_on:
      - db
      - redis
      - web
    restart: unless-stopped

  # ==========================================
  # NGINX REVERSE PROXY (Optional - for production)
  # ==========================================
  nginx:
    image: nginx:alpine
    container_name: legal_manager_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./ssl:/etc/nginx/ssl  # For SSL certificates
    depends_on:
      - web
    restart: unless-stopped
    profiles:
      - production

  # ==========================================
  # MONITORING (Optional)
  # ==========================================
  flower:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: legal_manager_flower
    command: celery -A legal_manager flower --broker=redis://:redis123@redis:6379/0
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://:redis123@redis:6379/0
    depends_on:
      - redis
    restart: unless-stopped
    profiles:
      - monitoring

  # ==========================================
  # BACKUP SERVICE (Optional)
  # ==========================================
  backup:
    image: postgres:15-alpine
    container_name: legal_manager_backup
    command: >
      sh -c "
        while true; do
          PGPASSWORD=postgres123 pg_dump -h db -U postgres -d legal_manager > /backup/backup_$$(date +%Y%m%d_%H%M%S).sql
          find /backup -name '*.sql' -mtime +7 -delete
          sleep 86400
        done
      "
    volumes:
      - ./backups:/backup
    depends_on:
      - db
    restart: unless-stopped
    profiles:
      - backup

# ==========================================
# VOLUMES
# ==========================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local

# ==========================================
# NETWORKS
# ==========================================
networks:
  default:
    driver: bridge
